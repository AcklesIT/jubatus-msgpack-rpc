//
// msgpack::rpc::caller - MessagePack-RPC for C++
//
// Copyright (C) 2009-2010 FURUHASHI Sadayuki
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#ifndef MSGPACK_RPC_CALLER_H__
#define MSGPACK_RPC_CALLER_H__

#include "types.h"
#include "future.h"
#include <string>

namespace msgpack {
namespace rpc {


class session;


template <typename IMPL>
class caller {
public:
	caller() { }
	~caller() { }

%def gen_call(ret, name, send_method, lifetype = nil)
%varlen_each do |gen|
	template <[%gen.template%]>
	[%ret%] [%name%](const std::string& name,
			[%lifetype%] msglife,  %>if lifetype
			[%gen.args_const_ref%])
	{
		type::tuple<[%gen.types_const_ref%]> param([%gen.params%]);
		shared_zone  slife(msglife.release());   %>if lifetype == "auto_zone"
		shared_zone& slife = msglife;            %>if lifetype == "shared_zone"
		shared_zone  slife;                      %>unless lifetype
		return static_cast<IMPL*>(this)->[%send_method%](
				name, param, slife);
	}

%end
%end

	future call(const std::string& name)
	{
		type::tuple<> param;
		return static_cast<IMPL*>(this)->send_request(
				name, param, shared_zone());
	}

%gen_call("future", "call", "send_request", "auto_zone")
%gen_call("future", "call", "send_request", "shared_zone")
%gen_call("future", "call", "send_request")

	void notify(const std::string& name)
	{
		type::tuple<> param;
		return static_cast<IMPL*>(this)->send_notify(
				name, param, shared_zone());
	}

%gen_call("void", "notify", "send_notify", "auto_zone")
%gen_call("void", "notify", "send_notify", "shared_zone")
%gen_call("void", "notify", "send_notify")
};


}  // namespace rpc
}  // namespace msgpack

#endif /* msgpack/rpc/caller.h */

%# vim: filetype=mplex
