@title MessagePack-RPC/Erlang
@doc MessagePack-RPC/Erlang is an Erlang implementation of <a href="http://redmine.msgpack.org/projects/msgpack/wiki/RPCDesign">MessagePack-RPC</a>.
<h2>Prequisites</h2>
All you need is <a href="http://erlang.org">Erlang</a> (and BSD/GNU make). 
<a href="http://omake.metaprl.org/">OMake</a> will let you write code in a more confortable way.
<h2>Installation</h2>
<pre>
$ git clone git://github.com/msgpack/msgpack-rpc.git
$ cd msgpack-rpc/erlang
$ make
# escript priv/setup.es install
</pre>
<h2>Usage/Programming Guide</h2>
See <a href="http://redmine.msgpack.org/projects/msgpack/wiki/QuickStartErlang">wiki</a>, please.
<h2>Current Status</h2>
Now developing. First release (0.0.1) is coming soon.
<h2>Overall Design</h2>
<h3>Client</h3>
Just a simple API... 
<ol>
<li>mp_client:start/0<p>Starts the whole client system.	</p></li>
<li>mp_client:new/3</li>
<li>mp_client:call/4</li>
<li>mp_client:call_async/4</li>
<li>mp_client:close/1</li>
<li>mp_client:stop/0</li>
</ol>
Process tree
<pre>
msgpack_rpc_app (with application behaviour)
  |
  + msgpack_rpc_sup (with simple_one_for_one supervisor behaviour)
      |
      + msgpack_rpc_transport (with gen_server behaviour)
          inheritance => tcp, udp (,ssl, sctp, etc...)

(user tree)
  |
  + (user module) &lt;= with mpr_client

</pre>
<h3>Server</h3>
process tree here: users put mp_server_sup process into their own application by using start_link.
by passing user-defined name-prefix to mp_server_sup mp_server and other processes generate their own unique name so as to set multiple mp_server_sup's in single Erlang runtime.
<pre>
mp_server_sup (with supervisor)
  |
  + mp_sessions (with simple_one_for_one server)
  |   |
  |   + (user_module) &lt;= with mp_session behaviour - which connection oriented protocol uses
  |
  + mp_xxx_listener &lt;= mp_tcp_listener|mp_udp_recver (TODO!)

</pre>
<h4>TCP design</h4>
mp_tcp_listener uses inet_async pattern to accept requests.
after accepting new sockets, spawns user session handler under mp_server_session_sup,
with mp_tcp_session behaviour.
<h4>UDP design</h4>
mp_udp_recver spawns a lonely process as it reads from its bound port.
on the process user-defined callback shall be called (which is passed when mp_udp_recver starts).
<h3>Message Protocol</h3>
<h4>Request</h4>
<h4>Response</h4>
<h4>Notification</h4>
<ul>
  <li><a href="http://www.slideshare.net/frsyuki/architecture-of-messagepack">Architecture of MessagePack</a></li>
</ul>
@end
